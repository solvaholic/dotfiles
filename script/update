#!/bin/sh
#
# Run `script/update` to update the features `dotfiles` provides,
# after a fresh pull.
#
# - Call script/bootstrap and script/setup
#

DOTFILES_DEBUG=

# TODO: Set script_name programmatically.
script_name=script/update

# Initialize the warnings counter.
with_warnings=0

#
# Make sure `update` was called in a way we can get its path.
#
if [ -f "$0" ] && [ $( dirname "$0" ) ]; then
  # $0 is a file and `dirname` succeeds, so we think Yes.
  script_root="$( cd $( dirname "$0" ) && echo $PWD )"
else
  # $0 is not a file or `dirname` fails, so we think No.
  script_root=
  printf "\n[FAIL] $script_name: This script was called incorrectly. Unable to set \$script_root.\n\n"
  exit 1
fi

#
# Call dotfiles.sh to set some variables and define some functions.
#
if [ -x "$script_root/../dotfiles.sh" ]; then
  . "$script_root/../dotfiles.sh"
else
  printf "\n[FAIL] $script_name: Can't find 'dotfiles.sh'. Abort!\n\n"
  exit 1
fi

update_dotfiles () {
  if [ -x "$DOTFILES_ROOT/script/bootstrap" ]; then
    info "$script_name: Calling 'script/bootstrap'..."
    "$DOTFILES_ROOT/script/bootstrap"
  else
    fail "$script_name: Can't find 'script/bootstrap', or it's not executable."
  fi
  if [ -x "$DOTFILES_ROOT/script/setup" ]; then
    info "$script_name: Calling 'script/setup'..."
    "$DOTFILES_ROOT/script/setup"
  else
    fail "$script_name: Can't find 'script/setup', or it's not executable."
  fi
}

update_dotfiles
