#!/bin/sh
#
# Run `script/setup` to set up `dotfiles` in, or reset
# `dotfiles` to, its initial state.
#
# This covers shell and desktop preferences.
#
# This will _not_ run the OS-specific `setup` script.
#
# - Call `../git/setup` to set my Git configuration.
# - Symlink config files and directories in the right places.
# - ???
#

# Initialize the warnings counter.
with_warnings=0

#
# Make sure `setup` was called in a way we can get its path.
#
if [ -f "$0" ] && [ $( dirname "$0" ) ]; then
  # $0 is a file and `dirname` succeeds, so we think Yes.
  script_root="$( cd $( dirname "$0" ) && echo $PWD )"
else
  # $0 is not a file or `dirname` fails, so we think No.
  script_root=
  printf "\n[FAIL] script/setup: This script was called incorrectly. Unable to set \$script_root.\n\n"
  exit 1
fi

#
# Call dotfiles.sh to set some variables and define some functions.
#
if [ -x "$script_root/../dotfiles.sh" ]; then
  . "$script_root/../dotfiles.sh"
else
  printf "\n[FAIL] script/setup: Can't find 'dotfiles.sh'. Abort!\n\n"
  exit 1
fi


# TODO: Answer: Can we expect readlink to be available?


#
# Define link_file() function for creating symlinks.
#
link_file () {
  # Take $source and $target as parameters. Create a link ($target) to
  # $source. If $target already exists but is _not_ a link to $source
  # then ask the user what to do.

  local source="$1" target="$2"
  local overwrite= backup= skip= action=

  # Do $source and $target look like valid paths? If not then return 1.
  if [ ! -e "$source" ]; then
    fail "script/setup: \$source '$source' doesn't exist!"
    return 1
  elif [ ! -d "$( dirname "$target" )" ]; then
    fail "script/setup: \$target '$target' path is invalid!"
    return 1
  fi

  # If the target already exists, then prompt the user for action.
  if [ -f "$target" -o -d "$target" -o -L "$target" ]; then

    # link_file() inherits overwrite_all, backup_all, and skip_all
    # from the caller.
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      if [ -h "$target" ]; then
        # Target is a link. What's it point to?
        local currentSrc="$(readlink $target)"
      else
        local currentSrc=
      fi

      # If $target is already a link to $source then then assume "[s]kip".
      if [ "$currentSrc" == "$source" ]; then
        skip=true;
      else

        user "File already exists: $target ($(basename "$source")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$target"
      success "script/setup: Removed '$target'."
    elif [ "$backup" == "true" ]; then
      mv "$target" "${target}.backup"
      success "script/setup: Moved '$target' to '${target}.backup'."
    elif [ "$skip" == "true" ]; then
      success "script/setup: Skipped '$source'."
    fi
  fi

  if [ "$skip" != "true" ]; then
    ln -s "$source" "$target"
    success "script/setup: Linked '$source' to '$target'."
  fi
}

install_dotfiles () {
  info 'script/setup: Installing dotfiles...'

  local overwrite_all=false backup_all=false skip_all=false

  for source in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' ! -path '*.git*')
  do
    target="$HOME/.$(basename "${source%.*}")"
    link_file "$source" "$target"
  done

  find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' ! -path '*/.git/*' | while read line; do
    target="$HOME/.$(basename "${source%.*}")"
    link_file "$source" "$target"
  done

}
