#!/bin/sh
#
# This script is not meant to be executed directly.
# Run dotfiles' script/setup instead.
#
# - git/setup: Assert some Git client configuration.
#
#     - Make sure we have Git.
#     - Create .gitconfig.local, if it doesn't exist.
#     - Link files named *.symlink.
#


# Do we have dotshell env variables? If not, exit.
[ -z "$DOTFILES_ROOT" ] || exit


mytopic=git
myname=git/setup


debug "Entering '$mytopic' setup..."

#
# Make sure we have Git.
#
[ -x "$(command -v git)" ] || return


#
# Create .gitconfig.local, if it doesn't exist.
#
# - We have a gitconfig.local.symlink.
# - [WIN] We have Git Credential Manager.
# - Git credential.helper is set.
# - Git username, authorname, and email are set.
#

#
if [ ! -f "$DOTFILES_ROOT/git/gitconfig.local.symlink" ]; then

  debug "$myname: uname -r is \"$(uname -r)\"."
  if [ "$DOTFILES_OS" = "Linux" ] && uname -r | grep -q Microsoft$; then
  # If we're on Linux on WSL then use Git Credential Manager.
    if [ ! -x ~/.local/gcmw/git-credential-manager.exe ]; then
      info "Installing Git Credential Manager in WSL."
      _gcmurl=https://github.com/microsoft/Git-Credential-Manager-for-Windows/releases/download/1.18.5/gcmw-v1.18.5.zip
      _gcmzip="$(mktemp)"
      mkdir -p ~/.local/gcmw
      curl -sL "${_gcmurl}" > "${_gcmzip}" && \
      unzip -d ~/.local/gcmw/ "${_gcmzip}" && \
      rm "${_gcmzip}"
      chmod +x ~/.local/gcmw/git-credential-manager.exe
    fi
    if [ -x ~/.local/gcmw/git-credential-manager.exe ]; then
      git_credential="${HOME}/.local/gcmw/git-credential-manager.exe"
      info "Git credential.helper set to Git Credential Manager."
    else
      fail "There was a problem configuring your Git credential helper."
    fi
  elif [ "$DOTFILES_OS" = "MacOS" ]; then
  # If we're on MacOS then use 'osxkeychain'.
    git_credential='osxkeychain'
    info "Git credential.helper set to 'osxkeychain'."
  else
  # Otherwise use 'store'.
    git_credential='store'
    info "- - - -"
    user "HEY, YOUR GIT CREDENTIALS MAY NOT BE SAFE."
    info "Git will be configured to use the 'store' credential helper. If you"
    info "use HTTPS with your login and password, your password will be stored"
    info "in plain text in your home directory."
    info "- - - -"
    # TODO: Move to a secure way to cache Git creds in Linux and other OS.
  fi

  # TODO: Validate input here.

  user 'What is your GitHub username?'
  printf "     ==> "
  read -r git_username
  user 'What is your GitHub author name?'
  printf "     ==> "
  read -r git_authorname

  # user ' - What is your GitHub author email?'
  # read -e git_authoremail
  git_authoremail="$git_username@users.noreply.github.com"
  user "Git will be configured to use this author email address:"
  info "$git_authoremail"

  sed -e "s/USERNAME/$git_username/g" \
      -e "s/AUTHORNAME/$git_authorname/g" \
      -e "s/AUTHOREMAIL/$git_authoremail/g" \
      -e "s#GIT_CREDENTIAL_HELPER#$git_credential#g" \
      "$DOTFILES_ROOT/git/gitconfig.local.symlink.example" \
      > "$DOTFILES_ROOT/git/gitconfig.local.symlink"

fi


#
# Link files named *.symlink.
#

mysymlinks="$(find -H "$DOTFILES_ROOT/git" -maxdepth 2 -name '*.symlink' ! -path '*/.git*')"
debug "git/setup: Found files to link: ${mysymlinks}."

# We need these 3, for when we call link_file().
# shellcheck disable=SC2034
overwrite_all="false" backup_all="false" skip_all="false"

for source in $mysymlinks; do
  target="$HOME/.$(basename "${source%.*}")"
  debug "$0: 'link_file \"$source\" \"$target\"'"
  link_file "$source" "$target"
done

success 'git/setup: Success.'
